<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label8.Text" xml:space="preserve">
    <value>Если список не пуст, необходимо вставить новый узел
 перед текущей головой
 -Установить указатель Next нового узла на текущую голову.
 - Установить указатель Previous текущей головы на новый
 узел.
 - Обновить указатель головы списка(list.head), чтобы он
 указывал на новый узел.</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value> public void Add(int value)
    {
        if (list.capacity == list.size)
        {
            return;
        }
        var newNode = new Node(value);
        if (list.head == null)
        {
            list.head = newNode;

        }
        else
        {
            newNode.Next = list.head;
            list.head.Previous = newNode;
            list.head = newNode;
        }
        list.size++;
    }</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>Принцип работы алгоритма заключается в следующем:

1.Создание нового узла: Создается новый узел с заданным значением.
 Поскольку это двусвязный список, новый узел будет иметь два указателя — на следующий
(next) и на предыдущий(prev) узлы.
   
2.Перенастройка указателей: Указатель next нового узла устанавливается на текущий
 первый узел списка(текущую голову). Если список не пуст, то указатель prev текущего
 первого узла устанавливается на новый узел(т.к.новый узел становится новым первым
 узлом).

3.Обновление головы: Указатель головы списка обновляется так, чтобы он указывал на новый 
узел, тем самым делая его первым элементом списка.</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value> Алгоритм добавления нового элемента в голову двусвязного списка направлен на вставку 
 нового узла в начале списка, при этом корректно обновляя указатели, чтобы сохранить
 двусвязную структуру. Примерные шаги включают создание нового узла, переопределе-
-ние указателей для связи этого узла с текущим элементом головы, и обновление
 указателя головы на новый узел.</value>
  </data>
  <data name="label11.Text" xml:space="preserve">
    <value>public int Search(int value)
{
    var current = list.head;
    int n = 0;
    while (current != null)
    {
        if (current.Value == value)
        {
            return n;
        }
        current = current.Next;
        n++;
    }
        
    return -1;
}

</value>
  </data>
  <data name="label10.Text" xml:space="preserve">
    <value>1. Начало с головы:
   Алгоритм всегда начинает поиск с головы списка (list.head).

2. Последовательный просмотр узлов:
   - Поочередно просматриваются узлы один за другим.
   - Для каждого узла проверяется значение.

3. Сравнение значений:
   - Если значение текущего узла совпадает с искомым, поиск заканчивается успехом.
   - Если значение не совпадает, алгоритм переходит к следующему узлу.

4. Окончание поиска:
   - Поиск заканчивается либо при нахождении узла с искомым значением, либо при достижении
 конца списка (когда следующий узел null)</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>Поиск в двусвязном списке — это алгоритм, позволяющий найти узел с нужным значением или
 определить, что такого узла нет. Основная идея состоит в последовательном просмотре узлов,
 начиная с головы списка, до тех пор, пока не будет найден узел с искомым значением или
 не закончится список.</value>
  </data>
</root>